// Generated by gencpp from file opencv_cam/cluRequest.msg
// DO NOT EDIT!


#ifndef OPENCV_CAM_MESSAGE_CLUREQUEST_H
#define OPENCV_CAM_MESSAGE_CLUREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace opencv_cam
{
template <class ContainerAllocator>
struct cluRequest_
{
  typedef cluRequest_<ContainerAllocator> Type;

  cluRequest_()
    : k(0)  {
    }
  cluRequest_(const ContainerAllocator& _alloc)
    : k(0)  {
  (void)_alloc;
    }



   typedef int32_t _k_type;
  _k_type k;





  typedef boost::shared_ptr< ::opencv_cam::cluRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opencv_cam::cluRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cluRequest_

typedef ::opencv_cam::cluRequest_<std::allocator<void> > cluRequest;

typedef boost::shared_ptr< ::opencv_cam::cluRequest > cluRequestPtr;
typedef boost::shared_ptr< ::opencv_cam::cluRequest const> cluRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opencv_cam::cluRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opencv_cam::cluRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::opencv_cam::cluRequest_<ContainerAllocator1> & lhs, const ::opencv_cam::cluRequest_<ContainerAllocator2> & rhs)
{
  return lhs.k == rhs.k;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::opencv_cam::cluRequest_<ContainerAllocator1> & lhs, const ::opencv_cam::cluRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace opencv_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::opencv_cam::cluRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_cam::cluRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_cam::cluRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_cam::cluRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_cam::cluRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_cam::cluRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opencv_cam::cluRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f099228d78e41d5bc9bf364a1ccb3dec";
  }

  static const char* value(const ::opencv_cam::cluRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf099228d78e41d5bULL;
  static const uint64_t static_value2 = 0xc9bf364a1ccb3decULL;
};

template<class ContainerAllocator>
struct DataType< ::opencv_cam::cluRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opencv_cam/cluRequest";
  }

  static const char* value(const ::opencv_cam::cluRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opencv_cam::cluRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 k\n"
;
  }

  static const char* value(const ::opencv_cam::cluRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opencv_cam::cluRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.k);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cluRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opencv_cam::cluRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opencv_cam::cluRequest_<ContainerAllocator>& v)
  {
    s << indent << "k: ";
    Printer<int32_t>::stream(s, indent + "  ", v.k);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENCV_CAM_MESSAGE_CLUREQUEST_H
